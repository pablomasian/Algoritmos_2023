TITLE:  Algorithms practice 1

AUTHOR 1:Tristán Pestoni García          LOGIN 1: tristan.pestoni
AUTHOR 2:Thiago Seijas Vázquez           LOGIN 2: thiago.seijas.vazquez
AUTHOR 3:Pablo Masián Carro	         LOGIN 3: pablo.masian.carro
GROUP: 6.1
DATE: 28/09/2023

The practice was run in this machine: 
Machine: 11th Gen Intel(R) Core(TM) i5-1135G7 @  2.40GHz
OS:  Ubuntu 22.04.1 LTS 
Kernel: 5.15.0-47-generic
In this practice we will analyse the implementation of two algorithms. The goal of the practice is to verify the analysis of their efficiency.

First of all, we are gonna test if the algorithmns work correctly. For this, we perform two tests:

Test with predefined arrays:
                                             maxSubSum1     maxSubSum2
[-9     2       -5      -4      6 ]              6              6
[4      0       9       2       5 ]             20             20
[-2     -1      -9      -7      -1]              0              0
[9      -2      1       -7      8 ]              9              9
[15     -2      -5      -4      16]             20             20
[7      -5      6       7       -7]             15             15

Test with randomly-generated arrays:
                                                                                  maxSubSum1     maxSubSum2
[-1     8       -2      -2      -2      -2      4       -8      -4]                    8               8
[5      6       -1      2       1       3       7       -4      3 ]                   23              23
[-6     4       6       2       1       -9      9       -8      -1]                   13              13
[3      2       3       -7      0       8       7       6       7 ]                   29              29
[-1     -2      -2      -5      0       4       3       7       -4]                   14              14
[-2     -9      -1      -7      9       -5      8       7       -5]                   19              19
[-9     9       6       7       0       -9      9       2       2 ]                   26              26
[-8     4       2       -8      4       -5      -7      1       6 ]                    7               7
[9      1       7       9       -2      2       3       -9      3 ]                   29              29
[-5     -2      4       2       1       4       -2      -6      -3]                   11              11

Now, studying the following tables we can determine the theoretical complexity of the algorithms and perform an empirical verification using an underestimed and overestimed bound.

Maximun value with maxSubSum1:

            n                  t              t/n^1.8            t/n^2.0           t/n^2.2

(*)        500               266.608      0.0036959550        0.0010664308      0.0003077079
          1000               997.000      0.0039691285        0.0009970000      0.0002504351
          2000              5022.000      0.0057414649        0.0012555000      0.0002745432
          4000             16949.000      0.0055646275        0.0010593125      0.0002016564
          8000             65824.000      0.0062061504        0.0010285000      0.0001704458
         16000            266144.000      0.0072061071        0.0010396250      0.0001499867
         32000           1063479.000      0.0082691136        0.0010385537      0.0001304364           

Underestimed Cote: t/n^1.8            
Overestimed Cote: t/n^2.2
Adjusted Cote: t/n^2.0           
Observations: In the adjusted Cote, the values tend to a constant 0.0010.
The time it takes grows in the Underestimed Cote, and decreases in the Overestimed Cote.

-The (*) indicates that the execution time is lower than 500µ so a loop was executed and the average time was used instead.

Maximun value with maxSubSum2:

            n             t           t/n^0.8            t/n^1.0           t/n^1.2
       
(*)        500           0.902      0.0062535528        0.0018044000      0.0005206415
(*)       1000           1.798      0.0071571707        0.0017978000      0.0004515869
(*)       2000           3.289      0.0075208389        0.0016446000      0.0003596287
(*)       4000           6.977      0.0091625109        0.0017442250      0.0003320401
(*)       8000          14.156      0.0106778522        0.0017695625      0.0002932567
(*)      16000          29.805      0.0129118155        0.0018627875      0.0002687443
(*)      32000          59.696      0.0148534781        0.0018655125      0.0002342978

Underestimed Cote: t/n^0.8          
Overestimed Cote: t/n^1.2
Adjusted Cote: t/n^1.0
Observations: In the adjusted Cote, the values tend to a constant 0.0017.
The time it takes grows in the Underestimed Cote, and decreases in the Overestimed Cote.

-The (*) indicates that the execution time is lower than 500µ so a loop was executed and the average time was used instead.

In conclusion, the most efficient algorithm is the first one since the time it takes to run is less than on the second one.